---
version: '3.5'
services:
  kdc:
    hostname: kdc.kerberos-demo.local
    build: kdc/
    container_name: kdc
    volumes:
      - secret:/var/lib/secret
      - ../../environment/kerberos/kdc/krb5.conf:/etc/kdc/krb5.conf

  zookeeper:
    image: confluentinc/cp-zookeeper:${TAG}
    hostname: zookeeper.kerberos-demo.local
    container_name: zookeeper
    depends_on:
      - kdc
    # Required to wait for the keytab to get generated
    restart: on-failure
    volumes:
      - secret:/var/lib/secret
      - ../../environment/kerberos/kdc/krb5.conf:/etc/krb5.conf
      - ../../environment/kerberos/zookeeper/zookeeper.sasl.jaas.config:/etc/kafka/zookeeper.sasl.jaas.config
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_MAX_CLIENT_CNXNS: 0
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/zookeeper.sasl.jaas.config
        -Djava.security.krb5.conf=/etc/krb5.conf
        -Dzookeeper.authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
        -Dsun.security.krb5.debug=true
        -Dzookeeper.allowSaslFailedClients=false
        -Dzookeeper.requireClientAuthScheme=sasl


  broker:
    image: confluentinc/${CP_KAFKA_IMAGE}:${TAG}
    hostname: broker.kerberos-demo.local
    container_name: broker
    depends_on:
      - zookeeper
      - kdc
    # Required to wait for the keytab to get generated
    restart: on-failure
    volumes:
      - secret:/var/lib/secret
      - ../../environment/kerberos/kdc/krb5.conf:/etc/krb5.conf
      - ../../environment/kerberos/kafka/broker.sasl.jaas.config:/etc/kafka/broker.sasl.jaas.config
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper.kerberos-demo.local:2181'
      KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://broker.kerberos-demo.local:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      # Confluent Metrics Reporter for Control Center Cluster Monitoring
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9092

      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_REPORTER_SASL_MECHANISM: GSSAPI
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONFLUENT_METRICS_REPORTER_SASL_KERBEROS_SERVICE_NAME: kafka
      CONFLUENT_METRICS_REPORTER_SASL_JAAS_CONFIG: "com.sun.security.auth.module.Krb5LoginModule required \
        useKeyTab=true \
        storeKey=true \
        keyTab=\"/var/lib/secret/kafka-admin.key\" \
        principal=\"admin/for-kafka@TEST.CONFLUENT.IO\";"
      CONFLUENT_METRICS_ENABLE: 'true'
      # Kerberos / GSSAPI Authentication mechanism
      KAFKA_SASL_ENABLED_MECHANISMS: GSSAPI
      KAFKA_SASL_KERBEROS_SERVICE_NAME: kafka
      # Configure replication to require Kerberos:
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: GSSAPI
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_PLAINTEXT

      # LISTENER_NAME_SASL_PLAINTEXT_GSSAPI_SASL_JAAS_CONFIG: "com.sun.security.auth.module.Krb5LoginModule required \
      #   useKeyTab=true \
      #   storeKey=true \
      #   keyTab=\"/var/lib/secret/broker.key\" \
      #   principal=\"broker@TEST.CONFLUENT.IO\";"

      # Authorization config:
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.auth.SimpleAclAuthorizer
      KAFKA_ZOOKEEPER_SET_ACL: "true"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"
      KAFKA_SUPER_USERS: User:admin;User:kafka;User:schemaregistry;User:connect;User:controlcenter
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/broker.sasl.jaas.config"

  broker2:
    image: confluentinc/${CP_KAFKA_IMAGE}:${TAG}
    hostname: broker2.kerberos-demo.local
    container_name: broker2
    depends_on:
      - zookeeper
      - kdc
    # Required to wait for the keytab to get generated
    restart: on-failure
    volumes:
      - secret:/var/lib/secret
      - ../../environment/kerberos/kdc/krb5.conf:/etc/krb5.conf
      - ../../environment/kerberos/kafka/broker2.sasl.jaas.config:/etc/kafka/broker.sasl.jaas.config
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper.kerberos-demo.local:2181'
      KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://broker2.kerberos-demo.local:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      # Confluent Metrics Reporter for Control Center Cluster Monitoring
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker2:19092

      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_REPORTER_SASL_MECHANISM: GSSAPI
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONFLUENT_METRICS_REPORTER_SASL_KERBEROS_SERVICE_NAME: kafka
      CONFLUENT_METRICS_REPORTER_SASL_JAAS_CONFIG: "com.sun.security.auth.module.Krb5LoginModule required \
        useKeyTab=true \
        storeKey=true \
        keyTab=\"/var/lib/secret/kafka-admin.key\" \
        principal=\"admin/for-kafka@TEST.CONFLUENT.IO\";"
      CONFLUENT_METRICS_ENABLE: 'true'
      # Kerberos / GSSAPI Authentication mechanism
      KAFKA_SASL_ENABLED_MECHANISMS: GSSAPI
      KAFKA_SASL_KERBEROS_SERVICE_NAME: kafka
      # Configure replication to require Kerberos:
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: GSSAPI
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_PLAINTEXT
      # Authorization config:
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.auth.SimpleAclAuthorizer
      KAFKA_ZOOKEEPER_SET_ACL: "true"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"
      KAFKA_SUPER_USERS: User:admin;User:kafka;User:schemaregistry;User:connect;User:controlcenter
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/broker.sasl.jaas.config"

  client:
    build: client/
    container_name: client
    hostname: client.kerberos-demo.local
    depends_on:
      - broker
      - broker2
      - kdc
    # Required to wait for the keytab to get generated
    volumes:
      - secret:/var/lib/secret
      - ../../environment/kerberos/kdc/krb5.conf:/etc/krb5.conf

  connect:
    image: vdesabou/kafka-docker-playground-connect:${TAG}
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - broker
      - broker2
      - schema-registry
    # Required to wait for the keytab to get generated
    restart: on-failure
    # volumes are overwritten
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: "connect"
      CONNECT_PRODUCER_CLIENT_ID: "connect-worker-producer"
      CONNECT_CONFIG_STORAGE_TOPIC: connect.config
      CONNECT_OFFSET_STORAGE_TOPIC: connect.offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect.status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      # Confluent Monitoring Interceptors for Control Center Streams Monitoring
      # producer
      CONNECT_CONFLUENT_MONITORING_INTERCEPTOR_SASL_KERBEROS_SERVICE_NAME: kafka
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: "com.sun.security.auth.module.Krb5LoginModule required \
        useKeyTab=true \
        storeKey=true \
        keyTab=\"/var/lib/secret/kafka-connect.key\" \
        principal=\"connect@TEST.CONFLUENT.IO\";"
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: GSSAPI
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_KERBEROS_SERVICE_NAME: kafka
      # consumer
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: "com.sun.security.auth.module.Krb5LoginModule required \
        useKeyTab=true \
        storeKey=true \
        keyTab=\"/var/lib/secret/kafka-connect.key\" \
        principal=\"connect@TEST.CONFLUENT.IO\";"
      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: GSSAPI
      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_KERBEROS_SERVICE_NAME: kafka
      # Configure the Connect workers to use SASL/GSSAPI.
      CONNECT_SASL_MECHANISM: GSSAPI
      CONNECT_SASL_KERBEROS_SERVICE_NAME: kafka
      CONNECT_SECURITY_PROTOCOL: SASL_PLAINTEXT
      # JAAS
      CONNECT_SASL_JAAS_CONFIG: "com.sun.security.auth.module.Krb5LoginModule required \
        useKeyTab=true \
        storeKey=true \
        keyTab=\"/var/lib/secret/kafka-connect.key\" \
        principal=\"connect@TEST.CONFLUENT.IO\";"
      # producer
      CONNECT_PRODUCER_SASL_MECHANISM: GSSAPI
      CONNECT_PRODUCER_SASL_KERBEROS_SERVICE_NAME: kafka
      CONNECT_PRODUCER_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONNECT_PRODUCER_SASL_JAAS_CONFIG: "com.sun.security.auth.module.Krb5LoginModule required \
        useKeyTab=true \
        storeKey=true \
        keyTab=\"/var/lib/secret/kafka-connect.key\" \
        principal=\"connect@TEST.CONFLUENT.IO\";"
      # consumer
      CONNECT_CONSUMER_SASL_MECHANISM: GSSAPI
      CONNECT_CONSUMER_SASL_KERBEROS_SERVICE_NAME: kafka
      CONNECT_CONSUMER_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONNECT_CONSUMER_SASL_JAAS_CONFIG: "com.sun.security.auth.module.Krb5LoginModule required \
        useKeyTab=true \
        storeKey=true \
        keyTab=\"/var/lib/secret/kafka-connect.key\" \
        principal=\"connect@TEST.CONFLUENT.IO\";"

  schema-registry:
    image: confluentinc/cp-schema-registry:${TAG}
    hostname: schema-registry
    container_name: schema-registry
    # Required to wait for the keytab to get generated
    restart: on-failure
    depends_on:
      - zookeeper
      - broker
    volumes:
      - secret:/var/lib/secret
      - ../../environment/kerberos/kdc/krb5.conf:/etc/krb5.conf
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:9092
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: SASL_PLAINTEXT
      SCHEMA_REGISTRY_KAFKASTORE_SASL_MECHANISM: GSSAPI
      SCHEMA_REGISTRY_KAFKASTORE_SASL_KERBEROS_SERVICE_NAME: kafka
      SCHEMA_REGISTRY_KAFKASTORE_SASL_JAAS_CONFIG: "com.sun.security.auth.module.Krb5LoginModule required \
        useKeyTab=true \
        storeKey=true \
        keyTab=\"/var/lib/secret/kafka-schemaregistry.key\" \
        principal=\"schemaregistry@TEST.CONFLUENT.IO\";"

  control-center:
    image: confluentinc/cp-enterprise-control-center:${TAG}
    container_name: control-center
    # Required to wait for the keytab to get generated
    restart: on-failure
    depends_on:
      - zookeeper
      - broker
      - connect
    ports:
      - "9021:9021"
    volumes:
      - secret:/var/lib/secret
      - ../../environment/kerberos/kdc/krb5.conf:/etc/krb5.conf
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:9092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      # Amount of heap to use for internal caches. Increase for better thoughput
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 100000000
      CONTROL_CENTER_CONNECT_CLUSTER: "http://connect:8083"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: "960032"
      CONTROL_CENTER_STREAMS_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONTROL_CENTER_STREAMS_SASL_JAAS_CONFIG: "com.sun.security.auth.module.Krb5LoginModule required \
        useKeyTab=true \
        storeKey=true \
        keyTab=\"/var/lib/secret/kafka-controlcenter.key\" \
        principal=\"controlcenter@TEST.CONFLUENT.IO\";"
      CONTROL_CENTER_STREAMS_SASL_MECHANISM: GSSAPI
      CONTROL_CENTER_STREAMS_SASL_KERBEROS_SERVICE_NAME: kafka

volumes:
  secret: {}

networks:
  default:
    name: kerberos-demo.local
